.card > main > .text {
    .p {
        margin-bottom: 0.5em;
    }

    & > .autofit > :first-child {
        margin-top: 0;
    }

    & > .autofit > :last-child {
        margin-bottom: 0;
    }

    .inspiration {
        display: inline-block;

        img {
            display: inline;
            width: 0.8em;
            height: 0.8em;
    
            margin-left: 0.1em;
            margin-bottom: -0.15em;
            vertical-align: baseline;
            margin-right: 0.1em;
    
            opacity: 0.8;
        }
    } 

    .sequence {

        margin-top: 1em;
        margin-bottom: 1em;
        // padding-left: 5mm;
        padding-left: 0mm;

        list-style: none;

        counter-reset: turn;

        .turn {
            margin-bottom: 0.5em;

            counter-increment: turn;
            display: block;
            
            &::before {
                display: inline-block;
                width: 5mm;
                margin-right: 2mm;

                content: counter(turn, upper-roman);
                text-align: center;
            }
        }
    }

    .reminder {
        font-style: italic;
    }

    .trigger {
        .prefix {
            font-weight: 600;
        }
    }

    strong {
        font-weight: 600;
    }

    .attack {
        font-weight: 600;
    }

    .block {
        font-weight: 600;
    }

    .keyword {
        font-weight: 600;
    }

    .invoke {
        font-weight: 600;
    }

    .charge {
        font-weight: 600;
    }

    .orange {
        color: var(--color-upgrade-inc);
    }

    .blue {
        color: var(--color-upgrade-dec);
    }

    .invoke-ability {
        // background-color: var(--color-textbox-bg);
        // border-radius: 1mm;
        // margin: -2mm;
        // padding: 2mm;

        margin-top: 1.5em;
        margin-bottom: 0.5em;

        .invoke-name {
            font-family: 'Grenze';
            font-style: italic;
            font-weight: 600;

            text-align: center;

            &::before {
                content: '—  ';
            }
            &::after {
                content: '  —';
            }
        }

        .invoke-text {

        }
    }
}
